.\" Copyright 2017 Denis Shtyrov. All rights reserved.
.\"
.\" MIT License
.\"
.\" Permission is hereby granted, free of charge, to any person obtaining a copy
.\" of this software and associated documentation files (the "Software"), to deal
.\" in the Software without restriction, including without limitation the rights
.\" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
.\" copies of the Software, and to permit persons to whom the Software is
.\" furnished to do so, subject to the following conditions:
.\" 
.\" The above copyright notice and this permission notice shall be included in all
.\" copies or substantial portions of the Software.
.\" 
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
.\" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
.\" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
.\" SOFTWARE.

.Dd December 19, 2017
.Dt FJOIN 1
.Os
.Sh NAME
.Nm fjoin
.Nd fork, filter and join text stream
.Sh SYNOPSIS
.Nm
.Op Fl c Ar number
.Op Fl f Ar file
.Op Fl e Ar char
.Op Fl E
.Op Fl i Ar char
.Op Fl I
.Op Fl o Ar char
.Op Fl O
.Op Fl x
.Op Fl -
.Ar command
.Op Ar args
.Sh DESCRIPTION
The
.Nm
utility distributes text records received on standard input to a number of child processes running the specified
command and merges their output back to standard output as if the input is processed by a pipeline running only
a single instance of that command.
.Sh OPTIONS
.Nm
accepts the following options:
.Bl -tag -width Ds
.It Fl c
Specifies the number of child processes.
.It Fl e
Specifies standard error record
.Ar separator
character (new line by default).
.It Fl E
Exclude separators from standard error output.
.It Fl f
Read input records from a
.Ar file
instead of standard input.
.It Fl i
Specifies input
.Ar separator
character (new line by default).
.It Fl I
Exclude input separator characters from sending to child processes.
.It Fl o
Specifies output
.Ar separator
character (new line by default).
.It Fl O
Exclude output separators from output.
.It Fl x
Enable serialization of children's standard error streams.
.El
.Ss Separator Character Format
All options accepting the separator character must be followed either by a single character or C escape sequence string
(`\en', `\e000', `\excc', etc).
.Sh INPUT PROCESSING
.Nm
treats it's input as a stream of records separated by input separator character (`\en' by default) and produces the stream
of output records separated by output record separator character (`\en' by default). The output of separator characters can
be suppressed.
.Pp
Input records are distributed to child processes in round-robin manner. The output of child processes is joined in the
same order as they receive their input. For example, if there are two child processes, the first input record is sent
to a first child process, the second \(em to the second child, the third \(em to first child, the fourth \(em to second child,
etc. The output is assembled in the same way \(em the first output record of the first child becomes first output record of
joined output stream, the first output record of the second child becomes the second output record of joined stream,
the second output record of the first child becomes the third output record, the second output record of the second
child \(em the fourth output record, etc.
.Pp
Every child process must always produce exactly one output record, including the empty one (i.e. consisting of only
a separator character), for each input record. Otherwise, the behavior is undefined and may result in a deadlock.
.Pp
The output of joined output stream is fully deterministic and matches the output of a pipeline with a single child
process.
.Ss Input Record Numbering
Since input records are distributed among child processes, the order in which child processes receive their input
records does not match the order of input records of unforked input stream. To workaround this issue,
.Nm
sets
.Ev FJOIN_CHILD
and
.Ev FJOIN_CHILDREN
environment variables (refer to
.Sx ENVIRONMENT
section). A child process can derive the number of input record in unforked
input stream by simple formula:
.Pp
.D1 (x - 1) * FJOIN_CHILDREN + FJOIN_CHILD
.Pp
where
.Ar x
is a record number within child process input stream.
.Sh STANDARD ERROR PROCESSING
By default, child processes share the standard error stream with
.Nm .
The output of child processes sent to standard error stream is not serialized. This means that if two or more child
processes write to standard error stream simultaneously, they can produce garbled output.
.Pp
.Fl x
flag enables serialization of messages sent by child processes to their standard error streams. When this flag is enabled,
.Nm
expects that every child produces exactly one error record separated by separator character (specified by
.Fl e
option) for every input record. If no error record is produced for input record, child process must send an empty error
record consisting of a single separator character to it's standard error stream.
.Pp
Separator characters can be excluded from final standard error output by using the
.Fl E
flag.
.Pp
The serialialized error stream is fully deterministic and matches the standard error stream produced by a pipeline with
a single child process.
.Sh SPECIAL CONSIDERATIONS FOR BUFFERED I/O
If child processes use buffered I/O on their standard output streams, a situation may arise when some child processes
produce mostly empty or large amounts of very short output records whereas others produce many large records. In such
scenario, child processes producing short records might keep the data in their output I/O buffers for relatively long
periods of time. At the same time, the processes that produce long output records may need to flush their I/O buffers
more frequently.
.Pp
Since
.Nm
reads the output of it's child processes sequentially in round-robin manner, it might block on reading the output of
a child process if current child process does not flush it's output buffer leading to a deadlock. To avoid it, child
processes might need to flush their output buffers manually if they produce too many short records.
.Sh ENVIRONMENT
Every child process executed by
.Nm
is numbered and receives it's relative number and total number of child processes in
.Ev FJOIN_CHILD
and
.Ev FJOIN_CHILDREN
environment variables.
.Sh EXIT STATUS
.Ex -std
.Sh EXAMPLES
Filter file
.Ar myfile.txt
through AWK script
.Ar script.awk
by 4 instances of AWK in parallel.
.Pp
.D1 Li "fjoin -c 4 -f myfile.txt -- awk -f script.awk"
.Pp
Filter input lines through a slow Python script that might remove some lines from it's output using null character
as output record separator. Speed up input processing by running 8 instances of Python simultaneously.
.Pp
.D1 Li "fjoin -c 8 -O -o'\e000' -- python script.py"
.Pp
Filter large file through 2 parallel instances of grep looking for lines containing
.Ar pattern
.Pp
.D1 Li "fjoin -c 2 -f file -- grep 'pattern'"
.Sh BUGS
.Nm
cannot be used with commands that depend on the order of input records (hash generators, data compression
programs, uniq, etc) or change the order of input records in their output (sort).
.Sh AUTHORS
Written by Denis Shtyrov
.Sh REPORTING BUGS
Report bugs to <denis.shtyrov@gmail.com>
