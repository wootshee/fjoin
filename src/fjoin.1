.\" Copyright 2017 Denis Shtyrov. All rights reserved.
.\"
.\" MIT License
.\"
.\" Permission is hereby granted, free of charge, to any person obtaining a copy
.\" of this software and associated documentation files (the "Software"), to deal
.\" in the Software without restriction, including without limitation the rights
.\" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
.\" copies of the Software, and to permit persons to whom the Software is
.\" furnished to do so, subject to the following conditions:
.\" 
.\" The above copyright notice and this permission notice shall be included in all
.\" copies or substantial portions of the Software.
.\" 
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
.\" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
.\" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
.\" SOFTWARE.

.Dd December 19, 2017
.Dt FJOIN 1
.Os
.Sh NAME
.Nm fjoin
.Nd fork, filter and join text stream
.Sh SYNOPSIS
.Nm
.Op Fl n
.Op Fl c Ar number
.Op Fl d Ar delimiter
.Op Fl f Ar file
.Ar command
.Op Ar args
.Sh DESCRIPTION
The
.Nm
utility distributes lines of text received on standard input to a number of child processes
running the specified command and merges their output back to standard output in round robin
manner.
.Pp
The following options are available:
.Bl -tag -width Ds
.It Fl c
Specifies the number of child processes.
.It Fl f
Read input lines from a
.Ar file
instead of standard input.
.It Fl i
Specifies input
.Ar delimiter
character (new line by default).
.It Fl I
Exclude input delimiter characters from sending to child processes.
.It Fl o
Specifies output
.Ar delimiter
character (new line by default).
.It Fl O
Exclude output delimiters from output.
.Ar string1
from the input.
.El
.Pp
Input lines are distributed to child processes in round-robin manner. The output of child process is combined
in the same order as they received their input. For example, if there are two child processes, the first input
line is sent to first child process, the second to second child, the third to first child, the fourth to second,
etc. The output is assembled in the same way - the first output line of the first child becomes
the first output line of
.Nm
, the first output line of the second child becomes the second output line of
.Nm
, the second output line of the first child becomes the third output line,
the second output line of the second child becomes the fourth output line, etc.
.El
.Sh ENVIRONMENT
The
.Ev LANG , LC_ALL , LC_CTYPE
and
.Ev LC_COLLATE
environment variables affect the execution of
.Nm
as described in
.Xr environ 7 .
.Sh EXIT STATUS
.Ex -std
.Sh EXAMPLES
The following examples are shown as given to the shell:
.Pp
Create a list of the words in file1, one per line, where a word is taken to
be a maximal string of letters.
.Pp
.D1 Li "tr -cs \*q[:alpha:]\*q \*q\en\*q < file1"
.Pp
Translate the contents of file1 to upper-case.
.Pp
.D1 Li "tr \*q[:lower:]\*q \*q[:upper:]\*q < file1"
.Pp
(This should be preferred over the traditional
.Ux
idiom of
.Dq Li "tr a-z A-Z" ,
since it works correctly in all locales.)
.Pp
Strip out non-printable characters from file1.
.Pp
.D1 Li "tr -cd \*q[:print:]\*q < file1"
.Pp
Remove diacritical marks from all accented variants of the letter
.Ql e :
.Pp
.Dl "tr \*q[=e=]\*q \*qe\*q"
.Sh COMPATIBILITY
Previous
.Fx
implementations of
.Nm
did not order characters in range expressions according to the current
locale's collation order, making it possible to convert unaccented Latin
characters (esp.\& as found in English text) from upper to lower case using
the traditional
.Ux
idiom of
.Dq Li "tr A-Z a-z" .
Since
.Nm
now obeys the locale's collation order, this idiom may not produce
correct results when there is not a 1:1 mapping between lower and
upper case, or when the order of characters within the two cases differs.
As noted in the
.Sx EXAMPLES
section above, the character class expressions
.Dq Li [:lower:]
and
.Dq Li [:upper:]
should be used instead of explicit character ranges like
.Dq Li a-z
and
.Dq Li A-Z .
.Pp
System V has historically implemented character ranges using the syntax
.Dq Li [c-c]
instead of the
.Dq Li c-c
used by historic
.Bx
implementations and
standardized by POSIX.
System V shell scripts should work under this implementation as long as
the range is intended to map in another range, i.e., the command
.Dq Li "tr [a-z] [A-Z]"
will work as it will map the
.Ql \&[
character in
.Ar string1
to the
.Ql \&[
character in
.Ar string2 .
However, if the shell script is deleting or squeezing characters as in
the command
.Dq Li "tr -d [a-z]" ,
the characters
.Ql \&[
and
.Ql \&]
will be
included in the deletion or compression list which would not have happened
under a historic System V implementation.
Additionally, any scripts that depended on the sequence
.Dq Li a-z
to
represent the three characters
.Ql a ,
.Ql \-
and
.Ql z
will have to be
rewritten as
.Dq Li a\e-z .
.Pp
The
.Nm
utility has historically not permitted the manipulation of NUL bytes in
its input and, additionally, stripped NUL's from its input stream.
This implementation has removed this behavior as a bug.
.Pp
The
.Nm
utility has historically been extremely forgiving of syntax errors,
for example, the
.Fl c
and
.Fl s
options were ignored unless two strings were specified.
This implementation will not permit illegal syntax.
.Sh STANDARDS
The
.Nm
utility conforms to
.St -p1003.1-2001 .
.Pp
It should be noted that the feature wherein the last character of
.Ar string2
is duplicated if
.Ar string2
has less characters than
.Ar string1
is permitted by POSIX but is not required.
Shell scripts attempting to be portable to other POSIX systems should use
the
.Dq Li [#*]
convention instead of relying on this behavior.
The
.Fl u
option is an extension to the
.St -p1003.1-2001
standard.
